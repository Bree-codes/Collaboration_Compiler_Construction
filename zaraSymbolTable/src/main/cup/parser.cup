package red.stevo.code.Lexer;

import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:
  private ZaraLexer scanner;

  public parser(ZaraLexer s) {
    this.scanner = s;
  }

  public java_cup.runtime.Symbol scan() throws java.lang.Exception {
     return scanner.yylex();
  }

:};

terminal IDENTIFIER, CONSTANT, FLOAT, STRING_LITERAL, TRUE, FALSE;
terminal OPERATOR_ADD, OPERATOR_SUB, OPERATOR_MUL, OPERATOR_DIV, ASSIGN, OPERATOR_GREATER, OPERATOR_LESS, OPERATOR_AND;
terminal OPERATOR_GREATER_EQUAL, OPERATOR_LESS_EQUAL, OPERATOR_NOT, OPERATOR_OR, OPERATOR_DOT, OPERATOR_EQUAL;
terminal PUNCTUATION_CURLED_LEFT, PUNCTUATION_CURLED_RIGHT, PUNCTUATION_COMMA, PUNCTUATION_COLON;
terminal PUNCTUATION_SQUARE_LEFT, PUNCTUATION_SQUARE_RIGHT, DATATYPE;
terminal SEMI_COLON, PUNCTUATION_LEFT, PUNCTUATION_RIGHT, KEYWORD, OPERATOR_NOT_EQUAL;
terminal CONST, GLOBAL, BREAK, IN, WHILE, IF, ELSE, ELSEIF, DO, FOR, RETURN, CONTINUE, CLASS;

non terminal StmtList, Stmt, Expr, Term, Factor, l_declaration, initialize;
non terminal valueAssign, multipleAssign, multiAssignValue;
non terminal condition, boolTerm, boolFactor, relationOp;
non terminal ClassDecl, ClassBody, ClassMember, FuncDecl, VarDecl, ParamList, Param, ArgList;

precedence left OPERATOR_ADD, OPERATOR_SUB, OPERATOR_OR, OPERATOR_AND;
precedence left OPERATOR_MUL, OPERATOR_DIV;
precedence right OPERATOR_NOT;

start with StmtList;

//program execution starts here.
//errors are detected and handled here.
StmtList ::= StmtList Stmt
         {:
            result = new ArrayList<>();
            result.addAll((ArrayList) $1);
            result.add($2);
        :}
           |
           {:result = new ArrayList<>();:}
           | error SEMI_COLON
           {:
            System.err.println("Error: Unexpected semicolon.");
            result = null;
            :}
           | error PUNCTUATION_CURLED_RIGHT
             {:
    System.err.println("Error: Unexpected curly right bracket.");
    result = null;
    :}


Stmt ::= VarDecl {:
    result = $1;
    :}
         | IF PUNCTUATION_LEFT condition PUNCTUATION_RIGHT PUNCTUATION_CURLED_LEFT StmtList PUNCTUATION_CURLED_RIGHT
         {:
             result = new IfStmt($3, (ArrayList) $5);
           :}
         | WHILE PUNCTUATION_LEFT condition PUNCTUATION_RIGHT PUNCTUATION_CURLED_LEFT StmtList PUNCTUATION_CURLED_RIGHT
         {:
                result = new WhileStmt($3, (ArrayList) $5);
        :}
         | FuncDecl
         {:
         result = $1;
            :}
         | ClassDecl
         {:
            result = $1;
          :}
         ;

// Class Declaration
ClassDecl ::= CLASS IDENTIFIER PUNCTUATION_CURLED_LEFT ClassBody PUNCTUATION_CURLED_RIGHT
  {:
    result = new ClassDeclNode($2, (ArrayList) $4);
  :}
  ;

// Class Body
ClassBody ::= ClassBody ClassMember
            {:
        result = new ArrayList<>();
        ((ArrayList) $1).add($2);
            :}
            |
            {:
                result = new ArrayList<>();
             :}
            ;

// Class Member (variables or functions)
ClassMember ::= VarDecl
            {:
                result = $1;
            :}
              | FuncDecl
              {:
                result = $1;
            :}
              ;

// Variable Declaration
VarDecl ::= DATATYPE IDENTIFIER initialize
  {:
    result = new VarDeclNode($1, $2, $3);
  :}
  ;

// Right-hand side of variable declaration (assignment or empty initialization)
initialize ::= ASSIGN valueAssign SEMI_COLON  {:
    result = new Assignment($2);
  :}
             | SEMI_COLON    {:
    result = null;
  :}
             ;

// Value assignment
valueAssign ::= IDENTIFIER multipleAssign
        {:
            result = new MultipleAssignment($1, $2);
          :}
              | STRING_LITERAL
               {:
                    result = new StringLiteral($1);
                :}
              | Expr
              {:
                result = $1;
              :}
              | condition
              {:
                  result = $1;
              :}
              ;

// Multiple assignment
multipleAssign ::= ASSIGN IDENTIFIER multipleAssign
            {:
                result = new MultipleAssign($2, $3);

            :}
                 | ASSIGN multiAssignValue
                 {:
                    result = $2;
                :}
                 ;

// Function Declaration
FuncDecl ::= DATATYPE IDENTIFIER PUNCTUATION_LEFT ParamList PUNCTUATION_RIGHT PUNCTUATION_CURLED_LEFT StmtList PUNCTUATION_CURLED_RIGHT
  {:
    result = new FuncDeclNode($1, $2, (ArrayList) $4, (ArrayList) $6);
  :};

// Parameter List in Function Declaration
ParamList ::= ParamList PUNCTUATION_COMMA Param
            {:
                result = new ArrayList<>();
                ((ArrayList) $1).add($3);
            :}
            | Param
            {:
            result = new ArrayList<>();
            result.add($1);
          :}
            | {:
    // Empty parameter list
    result = new ArrayList<>();
  :};

// Parameter
Param ::= DATATYPE IDENTIFIER {:
    // Create a parameter node
    result = new ParamNode($1, $2);
  :}
        ;

// Function Call
Expr ::= IDENTIFIER PUNCTUATION_LEFT ArgList PUNCTUATION_RIGHT
       {:
    // Create function call expression
    result = new FunctionCall($1, (ArrayList) $3);
  :}
       ;

// Argument List in Function Call
ArgList ::= ArgList PUNCTUATION_COMMA Expr
          {:
    // Add argument to the list
    result = new ArrayList<>();
    ((ArrayList) $1).add($3);
  :}
          | Expr
          {:
    // Single argument
    result = new ArrayList<>();
    result.add($1);
  :}
          | {:
    // Empty argument list
    result = new ArrayList<>();
  :}
          ;

// Expression rules
Expr ::= Expr OPERATOR_ADD Term {:
    // Add terms in an expression
    result = new AddExpr($1, $3);
  :}
       | Expr OPERATOR_SUB Term {:
    // Subtract terms in an expression
    result = new SubtractExpr($1, $3);
  :}
       | Term {:
    // Single term expression
    result = $1;
  :}
       ;

// Term rules
Term ::= Term OPERATOR_MUL Factor {:
    // Multiply terms
    result = new MultiplyExpr($1, $3);
  :}
       | Term OPERATOR_DIV Factor {:
    // Divide terms
    result = new DivideExpr($1, $3);
  :}
       | Factor {:
    // Single factor term
    result = $1;
  :}
       ;

// Factor rules
Factor ::= CONSTANT {:
    // Process constant value
    result = new ConstantFactor($1);
  :}
         | IDENTIFIER {:
    // Process identifier
    result = new IdentifierFactor($1);
  :}
         | FLOAT {:
    // Process float value
    result = new FloatFactor($1);
  :}
         | PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT {:
    // Process expression inside parentheses
    result = $2;
  :}
         ;

// Conditional expressions
condition ::= boolTerm {:
    // Process boolean term
    result = $1;
  :}
              | condition OPERATOR_OR boolTerm {:
    // Process OR condition
    result = new OrCondition($1, $3);
  :}
              ;

// Boolean term processing
boolTerm ::= boolFactor {:
    // Process boolean factor
    result = $1;
  :}
             | boolTerm OPERATOR_AND boolFactor {:
    // Process AND condition
    result = new AndCondition($1, $3);
  :}
             ;

// Boolean factors (true/false and negations)
boolFactor ::= TRUE {:
    // Process TRUE boolean value
    result = new BooleanFactor(true);
  :}
             | FALSE {:
    // Process FALSE boolean value
    result = new BooleanFactor(false);
  :}
             | PUNCTUATION_LEFT condition PUNCTUATION_RIGHT {:
    // Process boolean condition inside parentheses
    result = $2;
  :}
             | OPERATOR_NOT boolFactor {:
    // Negate boolean condition
    result = new NotCondition($2);
  :}
             ;

// Relational operators
relationOp ::= OPERATOR_GREATER {:
    result = new GreaterThan();
  :}
            | OPERATOR_LESS {:
    result = new LessThan();
  :}
            | OPERATOR_EQUAL {:
    result = new Equals();
  :}
            | OPERATOR_NOT_EQUAL {:
    result = new NotEquals();
  :}
            | OPERATOR_GREATER_EQUAL {:
    result = new GreaterOrEqual();
  :}
            | OPERATOR_LESS_EQUAL {:
    result = new LessOrEqual();
  :}
            ;

